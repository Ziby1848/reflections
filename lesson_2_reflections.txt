What happens when you initialize a repository? Why do you need to do it?

A hidden folder .git is created. No commit is done. I need to do it, to use 
version control on that specific folder.

How is the staging area different from the working directory and the repository? What value do you think it offers?

It an intermediate step inbetween the two. It offers to commit multiple files with one commit and
thereby one commit message.

How can you use the staging area to make sure you have one commit per logical change?

I add as many files to the staging area as belong to the logical change, then I commit them alltogether in one go.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When I create another version, so not simply a bug fix or adding an feature and want to keep this in parallel to the
original version. I then don't need to jump inbetween different commits, but can use two branches instead.

How do the diagrams help you visualize the branch structure?

I can see which commit is the parent of a given commit, find untraceable commits and get an an overview about
the full structure of the repository.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

You are back to one branch. Similar parts from both branches are taken for this. In case of differences between the 
two branches, the last version before the branch was introduced is compared as well to decide which version to take.
In the diagram you can see two parallel paths.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Pro: less work, faster. Con: less overview what is actually merged. 